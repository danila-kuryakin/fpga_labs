// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab4_z1_lab4_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080750,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=391,HLS_SYN_LUT=269,HLS_VERSION=2021_2}" *)

module lab4_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        firstVector_arr_address0,
        firstVector_arr_ce0,
        firstVector_arr_q0,
        firstVector_arr_address1,
        firstVector_arr_ce1,
        firstVector_arr_q1,
        secondVector_arr_address0,
        secondVector_arr_ce0,
        secondVector_arr_q0,
        resultVecror_arr_address0,
        resultVecror_arr_ce0,
        resultVecror_arr_we0,
        resultVecror_arr_d0,
        resultVecror_arr_address1,
        resultVecror_arr_ce1,
        resultVecror_arr_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] firstVector_arr_address0;
output   firstVector_arr_ce0;
input  [15:0] firstVector_arr_q0;
output  [1:0] firstVector_arr_address1;
output   firstVector_arr_ce1;
input  [15:0] firstVector_arr_q1;
output  [1:0] secondVector_arr_address0;
output   secondVector_arr_ce0;
input  [15:0] secondVector_arr_q0;
output  [1:0] resultVecror_arr_address0;
output   resultVecror_arr_ce0;
output   resultVecror_arr_we0;
output  [31:0] resultVecror_arr_d0;
output  [1:0] resultVecror_arr_address1;
output   resultVecror_arr_ce1;
input  [31:0] resultVecror_arr_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] firstVector_arr_address0;
reg firstVector_arr_ce0;
reg[1:0] firstVector_arr_address1;
reg firstVector_arr_ce1;
reg secondVector_arr_ce0;
reg resultVecror_arr_ce0;
reg resultVecror_arr_we0;
reg resultVecror_arr_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] icmp_ln9_reg_356;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] do_init_reg_129;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] i1_reg_145;
reg   [16:0] sext_ln9_phi_reg_220;
reg   [16:0] firstVector_arr_load_2_cast_phi_reg_232;
reg   [16:0] firstVector_arr_load_1_cast_phi_reg_244;
reg   [16:0] firstVector_arr_load_cast_phi_reg_256;
reg   [1:0] resultVecror_arr_addr_reg_350;
reg   [1:0] resultVecror_arr_addr_reg_350_pp0_iter1_reg;
reg   [1:0] resultVecror_arr_addr_reg_350_pp0_iter2_reg;
wire   [0:0] icmp_ln9_fu_274_p2;
reg   [0:0] icmp_ln9_reg_356_pp0_iter1_reg;
reg   [0:0] icmp_ln9_reg_356_pp0_iter2_reg;
reg   [15:0] firstVector_arr_load_reg_360;
reg   [15:0] firstVector_arr_load_1_reg_365;
reg  signed [15:0] secondVector_arr_load_reg_380;
reg   [31:0] resultVecror_arr_load_reg_385;
reg   [31:0] resultVecror_arr_load_reg_385_pp0_iter1_reg;
wire   [1:0] i_fu_280_p2;
reg   [1:0] i_reg_390;
wire  signed [16:0] firstVector_arr_load_cast_fu_286_p1;
wire  signed [16:0] firstVector_arr_load_1_cast_fu_289_p1;
wire  signed [16:0] firstVector_arr_load_2_cast_fu_292_p1;
wire  signed [16:0] sext_ln9_fu_296_p1;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_i1_phi_fu_149_p6;
wire   [16:0] ap_phi_reg_pp0_iter0_sext_ln9_phi_reg_220;
reg   [16:0] ap_phi_reg_pp0_iter1_sext_ln9_phi_reg_220;
wire   [16:0] ap_phi_reg_pp0_iter0_firstVector_arr_load_2_cast_phi_reg_232;
reg   [16:0] ap_phi_reg_pp0_iter1_firstVector_arr_load_2_cast_phi_reg_232;
wire   [16:0] ap_phi_reg_pp0_iter0_firstVector_arr_load_1_cast_phi_reg_244;
reg   [16:0] ap_phi_reg_pp0_iter1_firstVector_arr_load_1_cast_phi_reg_244;
wire   [16:0] ap_phi_reg_pp0_iter0_firstVector_arr_load_cast_phi_reg_256;
reg   [16:0] ap_phi_reg_pp0_iter1_firstVector_arr_load_cast_phi_reg_256;
wire   [63:0] zext_ln9_fu_268_p1;
wire    ap_block_pp0_stage1;
wire   [31:0] grp_fu_325_p4;
wire  signed [16:0] tmp4_fu_303_p2;
wire  signed [16:0] tmp5_fu_313_p2;
reg    grp_fu_325_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_180;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

lab4_z1_ama_addmuladd_17s_17s_16s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ama_addmuladd_17s_17s_16s_32ns_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp5_fu_313_p2),
    .din1(tmp4_fu_303_p2),
    .din2(secondVector_arr_load_reg_380),
    .din3(resultVecror_arr_load_reg_385_pp0_iter1_reg),
    .ce(grp_fu_325_ce),
    .dout(grp_fu_325_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((do_init_reg_129 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_1_cast_phi_reg_244 <= firstVector_arr_load_1_cast_phi_reg_244;
    end else if (((do_init_reg_129 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_1_cast_phi_reg_244 <= firstVector_arr_load_1_cast_fu_289_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_1_cast_phi_reg_244 <= ap_phi_reg_pp0_iter0_firstVector_arr_load_1_cast_phi_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((do_init_reg_129 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_2_cast_phi_reg_232 <= firstVector_arr_load_2_cast_phi_reg_232;
    end else if (((do_init_reg_129 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_2_cast_phi_reg_232 <= firstVector_arr_load_2_cast_fu_292_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_2_cast_phi_reg_232 <= ap_phi_reg_pp0_iter0_firstVector_arr_load_2_cast_phi_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((do_init_reg_129 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_cast_phi_reg_256 <= firstVector_arr_load_cast_phi_reg_256;
    end else if (((do_init_reg_129 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_cast_phi_reg_256 <= firstVector_arr_load_cast_fu_286_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_firstVector_arr_load_cast_phi_reg_256 <= ap_phi_reg_pp0_iter0_firstVector_arr_load_cast_phi_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((do_init_reg_129 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_sext_ln9_phi_reg_220 <= sext_ln9_phi_reg_220;
    end else if (((do_init_reg_129 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_sext_ln9_phi_reg_220 <= sext_ln9_fu_296_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_sext_ln9_phi_reg_220 <= ap_phi_reg_pp0_iter0_sext_ln9_phi_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        do_init_reg_129 <= 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_356 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        do_init_reg_129 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_356 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i1_reg_145 <= i_reg_390;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_356 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        i1_reg_145 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        firstVector_arr_load_1_cast_phi_reg_244 <= ap_phi_reg_pp0_iter1_firstVector_arr_load_1_cast_phi_reg_244;
        firstVector_arr_load_2_cast_phi_reg_232 <= ap_phi_reg_pp0_iter1_firstVector_arr_load_2_cast_phi_reg_232;
        firstVector_arr_load_cast_phi_reg_256 <= ap_phi_reg_pp0_iter1_firstVector_arr_load_cast_phi_reg_256;
        sext_ln9_phi_reg_220 <= ap_phi_reg_pp0_iter1_sext_ln9_phi_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if (((do_init_reg_129 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        firstVector_arr_load_1_reg_365 <= firstVector_arr_q0;
        firstVector_arr_load_reg_360 <= firstVector_arr_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_390 <= i_fu_280_p2;
        resultVecror_arr_load_reg_385 <= resultVecror_arr_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln9_reg_356 <= icmp_ln9_fu_274_p2;
        icmp_ln9_reg_356_pp0_iter1_reg <= icmp_ln9_reg_356;
        icmp_ln9_reg_356_pp0_iter2_reg <= icmp_ln9_reg_356_pp0_iter1_reg;
        resultVecror_arr_addr_reg_350 <= zext_ln9_fu_268_p1;
        resultVecror_arr_addr_reg_350_pp0_iter1_reg <= resultVecror_arr_addr_reg_350;
        resultVecror_arr_addr_reg_350_pp0_iter2_reg <= resultVecror_arr_addr_reg_350_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        resultVecror_arr_load_reg_385_pp0_iter1_reg <= resultVecror_arr_load_reg_385;
        secondVector_arr_load_reg_380 <= secondVector_arr_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln9_reg_356_pp0_iter2_reg == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_180)) begin
        if ((icmp_ln9_reg_356 == 1'd1)) begin
            ap_phi_mux_i1_phi_fu_149_p6 = 2'd0;
        end else if ((icmp_ln9_reg_356 == 1'd0)) begin
            ap_phi_mux_i1_phi_fu_149_p6 = i_reg_390;
        end else begin
            ap_phi_mux_i1_phi_fu_149_p6 = i1_reg_145;
        end
    end else begin
        ap_phi_mux_i1_phi_fu_149_p6 = i1_reg_145;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln9_reg_356 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            firstVector_arr_address0 = 64'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            firstVector_arr_address0 = 64'd1;
        end else begin
            firstVector_arr_address0 = 'bx;
        end
    end else begin
        firstVector_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            firstVector_arr_address1 = 64'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            firstVector_arr_address1 = 64'd0;
        end else begin
            firstVector_arr_address1 = 'bx;
        end
    end else begin
        firstVector_arr_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        firstVector_arr_ce0 = 1'b1;
    end else begin
        firstVector_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        firstVector_arr_ce1 = 1'b1;
    end else begin
        firstVector_arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_325_ce = 1'b1;
    end else begin
        grp_fu_325_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resultVecror_arr_ce0 = 1'b1;
    end else begin
        resultVecror_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        resultVecror_arr_ce1 = 1'b1;
    end else begin
        resultVecror_arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        resultVecror_arr_we0 = 1'b1;
    end else begin
        resultVecror_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        secondVector_arr_ce0 = 1'b1;
    end else begin
        secondVector_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_180 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_phi_reg_pp0_iter0_firstVector_arr_load_1_cast_phi_reg_244 = 'bx;

assign ap_phi_reg_pp0_iter0_firstVector_arr_load_2_cast_phi_reg_232 = 'bx;

assign ap_phi_reg_pp0_iter0_firstVector_arr_load_cast_phi_reg_256 = 'bx;

assign ap_phi_reg_pp0_iter0_sext_ln9_phi_reg_220 = 'bx;

assign firstVector_arr_load_1_cast_fu_289_p1 = $signed(firstVector_arr_load_1_reg_365);

assign firstVector_arr_load_2_cast_fu_292_p1 = $signed(firstVector_arr_q1);

assign firstVector_arr_load_cast_fu_286_p1 = $signed(firstVector_arr_load_reg_360);

assign i_fu_280_p2 = (i1_reg_145 + 2'd1);

assign icmp_ln9_fu_274_p2 = ((ap_phi_mux_i1_phi_fu_149_p6 == 2'd3) ? 1'b1 : 1'b0);

assign resultVecror_arr_address0 = resultVecror_arr_addr_reg_350_pp0_iter2_reg;

assign resultVecror_arr_address1 = zext_ln9_fu_268_p1;

assign resultVecror_arr_d0 = grp_fu_325_p4;

assign secondVector_arr_address0 = zext_ln9_fu_268_p1;

assign sext_ln9_fu_296_p1 = $signed(firstVector_arr_q0);

assign tmp4_fu_303_p2 = (ap_phi_reg_pp0_iter1_firstVector_arr_load_1_cast_phi_reg_244 + ap_phi_reg_pp0_iter1_firstVector_arr_load_cast_phi_reg_256);

assign tmp5_fu_313_p2 = (ap_phi_reg_pp0_iter1_firstVector_arr_load_2_cast_phi_reg_232 + ap_phi_reg_pp0_iter1_sext_ln9_phi_reg_220);

assign zext_ln9_fu_268_p1 = ap_phi_mux_i1_phi_fu_149_p6;

endmodule //lab4_z1
