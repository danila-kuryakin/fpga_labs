// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab4_z1_lab4_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.602000,HLS_SYN_LAT=93,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=117,HLS_VERSION=2021_2}" *)

module lab4_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        firstVector_arr_address0,
        firstVector_arr_ce0,
        firstVector_arr_q0,
        secondVector_arr_address0,
        secondVector_arr_ce0,
        secondVector_arr_q0,
        resultVecror_arr_address0,
        resultVecror_arr_ce0,
        resultVecror_arr_we0,
        resultVecror_arr_d0,
        resultVecror_arr_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] firstVector_arr_address0;
output   firstVector_arr_ce0;
input  [15:0] firstVector_arr_q0;
output  [1:0] secondVector_arr_address0;
output   secondVector_arr_ce0;
input  [15:0] secondVector_arr_q0;
output  [1:0] resultVecror_arr_address0;
output   resultVecror_arr_ce0;
output   resultVecror_arr_we0;
output  [31:0] resultVecror_arr_d0;
input  [31:0] resultVecror_arr_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg firstVector_arr_ce0;
reg secondVector_arr_ce0;
reg[1:0] resultVecror_arr_address0;
reg resultVecror_arr_ce0;
reg resultVecror_arr_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] add_ln9_fu_127_p2;
reg   [2:0] add_ln9_reg_179;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln9_fu_121_p2;
reg   [1:0] resultVecror_arr_addr_reg_189;
wire  signed [31:0] conv4_fu_133_p1;
reg  signed [31:0] conv4_reg_194;
wire    ap_CS_fsm_state3;
wire   [2:0] add_ln12_fu_148_p2;
reg   [2:0] add_ln12_reg_207;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln12_fu_142_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_162_p3;
wire    ap_CS_fsm_state8;
reg   [2:0] j_reg_85;
reg   [31:0] add3_reg_96;
wire   [63:0] zext_ln9_fu_115_p1;
wire   [63:0] zext_ln12_fu_137_p1;
reg   [2:0] i_fu_42;
wire  signed [15:0] grp_fu_162_p1;
wire    ap_CS_fsm_state7;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

lab4_z1_mac_muladd_16s_16s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16s_16s_32ns_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(firstVector_arr_q0),
    .din1(grp_fu_162_p1),
    .din2(add3_reg_96),
    .ce(1'b1),
    .dout(grp_fu_162_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add3_reg_96 <= resultVecror_arr_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        add3_reg_96 <= grp_fu_162_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_42 <= 3'd0;
    end else if (((icmp_ln12_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_42 <= add_ln9_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_85 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_85 <= add_ln12_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln12_reg_207 <= add_ln12_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln9_reg_179 <= add_ln9_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv4_reg_194 <= conv4_fu_133_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_121_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        resultVecror_arr_addr_reg_189 <= zext_ln9_fu_115_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln9_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        firstVector_arr_ce0 = 1'b1;
    end else begin
        firstVector_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        resultVecror_arr_address0 = resultVecror_arr_addr_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        resultVecror_arr_address0 = zext_ln9_fu_115_p1;
    end else begin
        resultVecror_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        resultVecror_arr_ce0 = 1'b1;
    end else begin
        resultVecror_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        resultVecror_arr_we0 = 1'b1;
    end else begin
        resultVecror_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secondVector_arr_ce0 = 1'b1;
    end else begin
        secondVector_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_121_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_148_p2 = (j_reg_85 + 3'd1);

assign add_ln9_fu_127_p2 = (i_fu_42 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign conv4_fu_133_p1 = $signed(secondVector_arr_q0);

assign firstVector_arr_address0 = zext_ln12_fu_137_p1;

assign grp_fu_162_p1 = conv4_reg_194;

assign icmp_ln12_fu_142_p2 = ((j_reg_85 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_121_p2 = ((i_fu_42 == 3'd4) ? 1'b1 : 1'b0);

assign resultVecror_arr_d0 = add3_reg_96;

assign secondVector_arr_address0 = zext_ln9_fu_115_p1;

assign zext_ln12_fu_137_p1 = j_reg_85;

assign zext_ln9_fu_115_p1 = i_fu_42;

endmodule //lab4_z1
