// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab1_z1_lab1_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.095500,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=19,HLS_SYN_LUT=73,HLS_VERSION=2021_2}" *)

module lab1_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        c,
        d,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] a;
input  [15:0] b;
input  [15:0] c;
input  [15:0] d;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] add_ln5_fu_56_p2;
reg   [16:0] add_ln5_reg_89;
wire    ap_CS_fsm_state2;
wire  signed [16:0] sext_ln5_fu_48_p1;
wire  signed [16:0] sext_ln5_2_fu_52_p1;
wire  signed [17:0] sext_ln5_4_fu_70_p1;
wire  signed [17:0] sext_ln5_1_fu_62_p1;
wire   [17:0] add_ln5_1_fu_73_p2;
wire  signed [17:0] sext_ln5_3_fu_66_p1;
wire   [17:0] y_fu_79_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln5_reg_89 <= add_ln5_fu_56_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5_1_fu_73_p2 = ($signed(sext_ln5_4_fu_70_p1) + $signed(sext_ln5_1_fu_62_p1));

assign add_ln5_fu_56_p2 = ($signed(sext_ln5_fu_48_p1) + $signed(sext_ln5_2_fu_52_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_return = $signed(y_fu_79_p2);

assign sext_ln5_1_fu_62_p1 = $signed(b);

assign sext_ln5_2_fu_52_p1 = $signed(c);

assign sext_ln5_3_fu_66_p1 = $signed(d);

assign sext_ln5_4_fu_70_p1 = $signed(add_ln5_reg_89);

assign sext_ln5_fu_48_p1 = $signed(a);

assign y_fu_79_p2 = ($signed(add_ln5_1_fu_73_p2) - $signed(sext_ln5_3_fu_66_p1));

endmodule //lab1_z1
