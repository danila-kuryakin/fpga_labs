// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_dct_Pipeline_Col_DCT_Loop_DCT_Outer_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        col_inbuf_address0,
        col_inbuf_ce0,
        col_inbuf_q0,
        col_inbuf_address1,
        col_inbuf_ce1,
        col_inbuf_q1,
        col_inbuf_address2,
        col_inbuf_ce2,
        col_inbuf_q2,
        col_inbuf_address3,
        col_inbuf_ce3,
        col_inbuf_q3,
        col_inbuf_address4,
        col_inbuf_ce4,
        col_inbuf_q4,
        col_inbuf_address5,
        col_inbuf_ce5,
        col_inbuf_q5,
        col_inbuf_address6,
        col_inbuf_ce6,
        col_inbuf_q6,
        col_inbuf_address7,
        col_inbuf_ce7,
        col_inbuf_q7,
        col_outbuf_address0,
        col_outbuf_ce0,
        col_outbuf_we0,
        col_outbuf_d0,
        dct_coeff_table_0_address0,
        dct_coeff_table_0_ce0,
        dct_coeff_table_0_q0,
        dct_coeff_table_1_address0,
        dct_coeff_table_1_ce0,
        dct_coeff_table_1_q0,
        dct_coeff_table_2_address0,
        dct_coeff_table_2_ce0,
        dct_coeff_table_2_q0,
        dct_coeff_table_3_address0,
        dct_coeff_table_3_ce0,
        dct_coeff_table_3_q0,
        dct_coeff_table_4_address0,
        dct_coeff_table_4_ce0,
        dct_coeff_table_4_q0,
        dct_coeff_table_5_address0,
        dct_coeff_table_5_ce0,
        dct_coeff_table_5_q0,
        dct_coeff_table_6_address0,
        dct_coeff_table_6_ce0,
        dct_coeff_table_6_q0,
        dct_coeff_table_7_address0,
        dct_coeff_table_7_ce0,
        dct_coeff_table_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] col_inbuf_address0;
output   col_inbuf_ce0;
input  [15:0] col_inbuf_q0;
output  [5:0] col_inbuf_address1;
output   col_inbuf_ce1;
input  [15:0] col_inbuf_q1;
output  [5:0] col_inbuf_address2;
output   col_inbuf_ce2;
input  [15:0] col_inbuf_q2;
output  [5:0] col_inbuf_address3;
output   col_inbuf_ce3;
input  [15:0] col_inbuf_q3;
output  [5:0] col_inbuf_address4;
output   col_inbuf_ce4;
input  [15:0] col_inbuf_q4;
output  [5:0] col_inbuf_address5;
output   col_inbuf_ce5;
input  [15:0] col_inbuf_q5;
output  [5:0] col_inbuf_address6;
output   col_inbuf_ce6;
input  [15:0] col_inbuf_q6;
output  [5:0] col_inbuf_address7;
output   col_inbuf_ce7;
input  [15:0] col_inbuf_q7;
output  [5:0] col_outbuf_address0;
output   col_outbuf_ce0;
output   col_outbuf_we0;
output  [15:0] col_outbuf_d0;
output  [2:0] dct_coeff_table_0_address0;
output   dct_coeff_table_0_ce0;
input  [13:0] dct_coeff_table_0_q0;
output  [2:0] dct_coeff_table_1_address0;
output   dct_coeff_table_1_ce0;
input  [14:0] dct_coeff_table_1_q0;
output  [2:0] dct_coeff_table_2_address0;
output   dct_coeff_table_2_ce0;
input  [14:0] dct_coeff_table_2_q0;
output  [2:0] dct_coeff_table_3_address0;
output   dct_coeff_table_3_ce0;
input  [14:0] dct_coeff_table_3_q0;
output  [2:0] dct_coeff_table_4_address0;
output   dct_coeff_table_4_ce0;
input  [14:0] dct_coeff_table_4_q0;
output  [2:0] dct_coeff_table_5_address0;
output   dct_coeff_table_5_ce0;
input  [14:0] dct_coeff_table_5_q0;
output  [2:0] dct_coeff_table_6_address0;
output   dct_coeff_table_6_ce0;
input  [14:0] dct_coeff_table_6_q0;
output  [2:0] dct_coeff_table_7_address0;
output   dct_coeff_table_7_ce0;
input  [14:0] dct_coeff_table_7_q0;

reg ap_idle;
reg col_inbuf_ce0;
reg col_inbuf_ce1;
reg col_inbuf_ce2;
reg col_inbuf_ce3;
reg col_inbuf_ce4;
reg col_inbuf_ce5;
reg col_inbuf_ce6;
reg col_inbuf_ce7;
reg col_outbuf_ce0;
reg col_outbuf_we0;
reg dct_coeff_table_0_ce0;
reg dct_coeff_table_1_ce0;
reg dct_coeff_table_2_ce0;
reg dct_coeff_table_3_ce0;
reg dct_coeff_table_4_ce0;
reg dct_coeff_table_5_ce0;
reg dct_coeff_table_6_ce0;
reg dct_coeff_table_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_339_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln19_fu_736_p2;
reg   [5:0] add_ln19_reg_975;
reg   [5:0] add_ln19_reg_975_pp0_iter1_reg;
reg   [5:0] add_ln19_reg_975_pp0_iter2_reg;
reg   [5:0] add_ln19_reg_975_pp0_iter3_reg;
reg   [5:0] add_ln19_reg_975_pp0_iter4_reg;
reg  signed [15:0] col_inbuf_load_reg_1020;
reg  signed [15:0] col_inbuf_load_3_reg_1035;
reg  signed [15:0] col_inbuf_load_5_reg_1045;
reg  signed [15:0] col_inbuf_load_6_reg_1050;
reg   [13:0] dct_coeff_table_0_load_reg_1060;
reg  signed [14:0] dct_coeff_table_3_load_reg_1075;
reg  signed [14:0] dct_coeff_table_5_load_reg_1085;
reg  signed [14:0] dct_coeff_table_6_load_reg_1090;
wire  signed [28:0] grp_fu_848_p2;
wire  signed [28:0] grp_fu_854_p2;
wire  signed [28:0] grp_fu_860_p2;
wire   [28:0] grp_fu_866_p3;
wire   [63:0] zext_ln43_fu_414_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln17_fu_457_p1;
wire   [63:0] zext_ln17_7_fu_500_p1;
wire   [63:0] zext_ln17_8_fu_543_p1;
wire   [63:0] zext_ln17_9_fu_586_p1;
wire   [63:0] zext_ln17_10_fu_629_p1;
wire   [63:0] zext_ln17_11_fu_672_p1;
wire   [63:0] zext_ln17_12_fu_715_p1;
wire   [63:0] k_1_cast_fu_720_p1;
wire   [63:0] zext_ln19_2_fu_819_p1;
reg   [3:0] k_fu_80;
wire   [3:0] add_ln13_fu_742_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_1_fu_84;
wire   [3:0] select_ln43_1_fu_386_p3;
reg   [3:0] ap_sig_allocacmp_i;
reg   [6:0] indvar_flatten39_fu_88;
wire   [6:0] add_ln43_1_fu_345_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten39_load;
wire   [2:0] trunc_ln17_fu_327_p1;
wire   [0:0] icmp_ln13_fu_360_p2;
wire   [3:0] add_ln43_fu_354_p2;
wire   [2:0] trunc_ln17_2_fu_374_p1;
wire   [2:0] trunc_ln19_fu_394_p1;
wire   [5:0] tmp_29_cast_fu_378_p3;
wire   [5:0] tmp_21_cast_fu_331_p3;
wire   [5:0] select_ln43_2_fu_406_p3;
wire   [2:0] trunc_ln43_fu_419_p1;
wire   [2:0] trunc_ln43_1_fu_431_p1;
wire   [5:0] tmp_fu_423_p3;
wire   [5:0] tmp_14_fu_435_p3;
wire   [5:0] select_ln43_10_fu_443_p3;
wire   [5:0] or_ln43_fu_451_p2;
wire   [2:0] trunc_ln43_2_fu_462_p1;
wire   [2:0] trunc_ln43_3_fu_474_p1;
wire   [5:0] tmp_15_fu_466_p3;
wire   [5:0] tmp_16_fu_478_p3;
wire   [5:0] select_ln43_11_fu_486_p3;
wire   [5:0] or_ln43_1_fu_494_p2;
wire   [2:0] trunc_ln43_4_fu_505_p1;
wire   [2:0] trunc_ln43_5_fu_517_p1;
wire   [5:0] tmp_17_fu_509_p3;
wire   [5:0] tmp_18_fu_521_p3;
wire   [5:0] select_ln43_12_fu_529_p3;
wire   [5:0] or_ln43_2_fu_537_p2;
wire   [2:0] trunc_ln43_6_fu_548_p1;
wire   [2:0] trunc_ln43_7_fu_560_p1;
wire   [5:0] tmp_19_fu_552_p3;
wire   [5:0] tmp_20_fu_564_p3;
wire   [5:0] select_ln43_13_fu_572_p3;
wire   [5:0] or_ln43_3_fu_580_p2;
wire   [2:0] trunc_ln43_8_fu_591_p1;
wire   [2:0] trunc_ln43_9_fu_603_p1;
wire   [5:0] tmp_21_fu_595_p3;
wire   [5:0] tmp_22_fu_607_p3;
wire   [5:0] select_ln43_14_fu_615_p3;
wire   [5:0] or_ln43_4_fu_623_p2;
wire   [2:0] trunc_ln43_10_fu_634_p1;
wire   [2:0] trunc_ln43_11_fu_646_p1;
wire   [5:0] tmp_23_fu_638_p3;
wire   [5:0] tmp_24_fu_650_p3;
wire   [5:0] select_ln43_15_fu_658_p3;
wire   [5:0] or_ln43_5_fu_666_p2;
wire   [2:0] trunc_ln43_12_fu_677_p1;
wire   [2:0] trunc_ln43_13_fu_689_p1;
wire   [5:0] tmp_25_fu_681_p3;
wire   [5:0] tmp_26_fu_693_p3;
wire   [5:0] select_ln43_16_fu_701_p3;
wire   [5:0] or_ln43_6_fu_709_p2;
wire   [3:0] select_ln43_fu_366_p3;
wire   [5:0] tmp_37_cast_fu_398_p3;
wire   [5:0] zext_ln19_fu_732_p1;
wire  signed [28:0] grp_fu_883_p3;
wire  signed [28:0] grp_fu_874_p3;
wire  signed [28:0] add_ln19_15_fu_827_p0;
wire   [28:0] grp_fu_901_p3;
wire  signed [28:0] grp_fu_892_p3;
(* use_dsp48 = "no" *) wire   [28:0] add_ln19_15_fu_827_p2;
(* use_dsp48 = "no" *) wire   [28:0] add_ln19_11_fu_823_p2;
wire   [28:0] add_ln19_1_fu_831_p2;
wire   [12:0] grp_fu_866_p2;
wire   [13:0] grp_fu_874_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [28:0] grp_fu_874_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dct_mul_mul_16s_15s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
mul_mul_16s_15s_29_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_q6),
    .din1(dct_coeff_table_1_q0),
    .ce(1'b1),
    .dout(grp_fu_848_p2)
);

dct_mul_mul_16s_15s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
mul_mul_16s_15s_29_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_q5),
    .din1(dct_coeff_table_2_q0),
    .ce(1'b1),
    .dout(grp_fu_854_p2)
);

dct_mul_mul_16s_15s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
mul_mul_16s_15s_29_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_q3),
    .din1(dct_coeff_table_4_q0),
    .ce(1'b1),
    .dout(grp_fu_860_p2)
);

dct_mac_muladd_16s_15s_13ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_13ns_29_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_q0),
    .din1(dct_coeff_table_7_q0),
    .din2(grp_fu_866_p2),
    .ce(1'b1),
    .dout(grp_fu_866_p3)
);

dct_mac_muladd_16s_14ns_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_14ns_29s_29_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_load_reg_1020),
    .din1(grp_fu_874_p1),
    .din2(grp_fu_848_p2),
    .ce(1'b1),
    .dout(grp_fu_874_p3)
);

dct_mac_muladd_16s_15s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_29s_29_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_load_3_reg_1035),
    .din1(dct_coeff_table_3_load_reg_1075),
    .din2(grp_fu_854_p2),
    .ce(1'b1),
    .dout(grp_fu_883_p3)
);

dct_mac_muladd_16s_15s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_29s_29_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_load_5_reg_1045),
    .din1(dct_coeff_table_5_load_reg_1085),
    .din2(grp_fu_860_p2),
    .ce(1'b1),
    .dout(grp_fu_892_p3)
);

dct_mac_muladd_16s_15s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_29ns_29_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(col_inbuf_load_6_reg_1050),
    .din1(dct_coeff_table_6_load_reg_1090),
    .din2(grp_fu_866_p3),
    .ce(1'b1),
    .dout(grp_fu_901_p3)
);

dct_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_84 <= select_ln43_1_fu_386_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_84 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten39_fu_88 <= add_ln43_1_fu_345_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten39_fu_88 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_80 <= add_ln13_fu_742_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_339_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln19_reg_975 <= add_ln19_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln19_reg_975_pp0_iter1_reg <= add_ln19_reg_975;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        dct_coeff_table_0_load_reg_1060 <= dct_coeff_table_0_q0;
        dct_coeff_table_3_load_reg_1075 <= dct_coeff_table_3_q0;
        dct_coeff_table_5_load_reg_1085 <= dct_coeff_table_5_q0;
        dct_coeff_table_6_load_reg_1090 <= dct_coeff_table_6_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln19_reg_975_pp0_iter2_reg <= add_ln19_reg_975_pp0_iter1_reg;
        add_ln19_reg_975_pp0_iter3_reg <= add_ln19_reg_975_pp0_iter2_reg;
        add_ln19_reg_975_pp0_iter4_reg <= add_ln19_reg_975_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_load_3_reg_1035 <= col_inbuf_q4;
        col_inbuf_load_5_reg_1045 <= col_inbuf_q2;
        col_inbuf_load_6_reg_1050 <= col_inbuf_q1;
        col_inbuf_load_reg_1020 <= col_inbuf_q7;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_339_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten39_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten39_load = indvar_flatten39_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce0 = 1'b1;
    end else begin
        col_inbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce1 = 1'b1;
    end else begin
        col_inbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce2 = 1'b1;
    end else begin
        col_inbuf_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce3 = 1'b1;
    end else begin
        col_inbuf_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce4 = 1'b1;
    end else begin
        col_inbuf_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce5 = 1'b1;
    end else begin
        col_inbuf_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce6 = 1'b1;
    end else begin
        col_inbuf_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_inbuf_ce7 = 1'b1;
    end else begin
        col_inbuf_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        col_outbuf_ce0 = 1'b1;
    end else begin
        col_outbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        col_outbuf_we0 = 1'b1;
    end else begin
        col_outbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_0_ce0 = 1'b1;
    end else begin
        dct_coeff_table_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_1_ce0 = 1'b1;
    end else begin
        dct_coeff_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_2_ce0 = 1'b1;
    end else begin
        dct_coeff_table_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_3_ce0 = 1'b1;
    end else begin
        dct_coeff_table_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_4_ce0 = 1'b1;
    end else begin
        dct_coeff_table_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_5_ce0 = 1'b1;
    end else begin
        dct_coeff_table_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_6_ce0 = 1'b1;
    end else begin
        dct_coeff_table_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_7_ce0 = 1'b1;
    end else begin
        dct_coeff_table_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_742_p2 = (select_ln43_fu_366_p3 + 4'd1);

assign add_ln19_11_fu_823_p2 = ($signed(grp_fu_883_p3) + $signed(grp_fu_874_p3));

assign add_ln19_15_fu_827_p0 = grp_fu_901_p3;

assign add_ln19_15_fu_827_p2 = ($signed(add_ln19_15_fu_827_p0) + $signed(grp_fu_892_p3));

assign add_ln19_1_fu_831_p2 = (add_ln19_15_fu_827_p2 + add_ln19_11_fu_823_p2);

assign add_ln19_fu_736_p2 = (tmp_37_cast_fu_398_p3 + zext_ln19_fu_732_p1);

assign add_ln43_1_fu_345_p2 = (ap_sig_allocacmp_indvar_flatten39_load + 7'd1);

assign add_ln43_fu_354_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign col_inbuf_address0 = zext_ln17_12_fu_715_p1;

assign col_inbuf_address1 = zext_ln17_11_fu_672_p1;

assign col_inbuf_address2 = zext_ln17_10_fu_629_p1;

assign col_inbuf_address3 = zext_ln17_9_fu_586_p1;

assign col_inbuf_address4 = zext_ln17_8_fu_543_p1;

assign col_inbuf_address5 = zext_ln17_7_fu_500_p1;

assign col_inbuf_address6 = zext_ln17_fu_457_p1;

assign col_inbuf_address7 = zext_ln43_fu_414_p1;

assign col_outbuf_address0 = zext_ln19_2_fu_819_p1;

assign col_outbuf_d0 = {{add_ln19_1_fu_831_p2[28:13]}};

assign dct_coeff_table_0_address0 = k_1_cast_fu_720_p1;

assign dct_coeff_table_1_address0 = k_1_cast_fu_720_p1;

assign dct_coeff_table_2_address0 = k_1_cast_fu_720_p1;

assign dct_coeff_table_3_address0 = k_1_cast_fu_720_p1;

assign dct_coeff_table_4_address0 = k_1_cast_fu_720_p1;

assign dct_coeff_table_5_address0 = k_1_cast_fu_720_p1;

assign dct_coeff_table_6_address0 = k_1_cast_fu_720_p1;

assign dct_coeff_table_7_address0 = k_1_cast_fu_720_p1;

assign grp_fu_866_p2 = 29'd4096;

assign grp_fu_874_p1 = grp_fu_874_p10;

assign grp_fu_874_p10 = dct_coeff_table_0_load_reg_1060;

assign icmp_ln13_fu_360_p2 = ((ap_sig_allocacmp_k_load == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_339_p2 = ((ap_sig_allocacmp_indvar_flatten39_load == 7'd64) ? 1'b1 : 1'b0);

assign k_1_cast_fu_720_p1 = select_ln43_fu_366_p3;

assign or_ln43_1_fu_494_p2 = (select_ln43_11_fu_486_p3 | 6'd2);

assign or_ln43_2_fu_537_p2 = (select_ln43_12_fu_529_p3 | 6'd3);

assign or_ln43_3_fu_580_p2 = (select_ln43_13_fu_572_p3 | 6'd4);

assign or_ln43_4_fu_623_p2 = (select_ln43_14_fu_615_p3 | 6'd5);

assign or_ln43_5_fu_666_p2 = (select_ln43_15_fu_658_p3 | 6'd6);

assign or_ln43_6_fu_709_p2 = (select_ln43_16_fu_701_p3 | 6'd7);

assign or_ln43_fu_451_p2 = (select_ln43_10_fu_443_p3 | 6'd1);

assign select_ln43_10_fu_443_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_fu_423_p3 : tmp_14_fu_435_p3);

assign select_ln43_11_fu_486_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_15_fu_466_p3 : tmp_16_fu_478_p3);

assign select_ln43_12_fu_529_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_17_fu_509_p3 : tmp_18_fu_521_p3);

assign select_ln43_13_fu_572_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_19_fu_552_p3 : tmp_20_fu_564_p3);

assign select_ln43_14_fu_615_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_21_fu_595_p3 : tmp_22_fu_607_p3);

assign select_ln43_15_fu_658_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_23_fu_638_p3 : tmp_24_fu_650_p3);

assign select_ln43_16_fu_701_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_25_fu_681_p3 : tmp_26_fu_693_p3);

assign select_ln43_1_fu_386_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? add_ln43_fu_354_p2 : ap_sig_allocacmp_i);

assign select_ln43_2_fu_406_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? tmp_29_cast_fu_378_p3 : tmp_21_cast_fu_331_p3);

assign select_ln43_fu_366_p3 = ((icmp_ln13_fu_360_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_k_load);

assign tmp_14_fu_435_p3 = {{trunc_ln43_1_fu_431_p1}, {3'd0}};

assign tmp_15_fu_466_p3 = {{trunc_ln43_2_fu_462_p1}, {3'd0}};

assign tmp_16_fu_478_p3 = {{trunc_ln43_3_fu_474_p1}, {3'd0}};

assign tmp_17_fu_509_p3 = {{trunc_ln43_4_fu_505_p1}, {3'd0}};

assign tmp_18_fu_521_p3 = {{trunc_ln43_5_fu_517_p1}, {3'd0}};

assign tmp_19_fu_552_p3 = {{trunc_ln43_6_fu_548_p1}, {3'd0}};

assign tmp_20_fu_564_p3 = {{trunc_ln43_7_fu_560_p1}, {3'd0}};

assign tmp_21_cast_fu_331_p3 = {{trunc_ln17_fu_327_p1}, {3'd0}};

assign tmp_21_fu_595_p3 = {{trunc_ln43_8_fu_591_p1}, {3'd0}};

assign tmp_22_fu_607_p3 = {{trunc_ln43_9_fu_603_p1}, {3'd0}};

assign tmp_23_fu_638_p3 = {{trunc_ln43_10_fu_634_p1}, {3'd0}};

assign tmp_24_fu_650_p3 = {{trunc_ln43_11_fu_646_p1}, {3'd0}};

assign tmp_25_fu_681_p3 = {{trunc_ln43_12_fu_677_p1}, {3'd0}};

assign tmp_26_fu_693_p3 = {{trunc_ln43_13_fu_689_p1}, {3'd0}};

assign tmp_29_cast_fu_378_p3 = {{trunc_ln17_2_fu_374_p1}, {3'd0}};

assign tmp_37_cast_fu_398_p3 = {{trunc_ln19_fu_394_p1}, {3'd0}};

assign tmp_fu_423_p3 = {{trunc_ln43_fu_419_p1}, {3'd0}};

assign trunc_ln17_2_fu_374_p1 = add_ln43_fu_354_p2[2:0];

assign trunc_ln17_fu_327_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln19_fu_394_p1 = select_ln43_1_fu_386_p3[2:0];

assign trunc_ln43_10_fu_634_p1 = add_ln43_fu_354_p2[2:0];

assign trunc_ln43_11_fu_646_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln43_12_fu_677_p1 = add_ln43_fu_354_p2[2:0];

assign trunc_ln43_13_fu_689_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln43_1_fu_431_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln43_2_fu_462_p1 = add_ln43_fu_354_p2[2:0];

assign trunc_ln43_3_fu_474_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln43_4_fu_505_p1 = add_ln43_fu_354_p2[2:0];

assign trunc_ln43_5_fu_517_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln43_6_fu_548_p1 = add_ln43_fu_354_p2[2:0];

assign trunc_ln43_7_fu_560_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln43_8_fu_591_p1 = add_ln43_fu_354_p2[2:0];

assign trunc_ln43_9_fu_603_p1 = ap_sig_allocacmp_i[2:0];

assign trunc_ln43_fu_419_p1 = add_ln43_fu_354_p2[2:0];

assign zext_ln17_10_fu_629_p1 = or_ln43_4_fu_623_p2;

assign zext_ln17_11_fu_672_p1 = or_ln43_5_fu_666_p2;

assign zext_ln17_12_fu_715_p1 = or_ln43_6_fu_709_p2;

assign zext_ln17_7_fu_500_p1 = or_ln43_1_fu_494_p2;

assign zext_ln17_8_fu_543_p1 = or_ln43_2_fu_537_p2;

assign zext_ln17_9_fu_586_p1 = or_ln43_3_fu_580_p2;

assign zext_ln17_fu_457_p1 = or_ln43_fu_451_p2;

assign zext_ln19_2_fu_819_p1 = add_ln19_reg_975_pp0_iter4_reg;

assign zext_ln19_fu_732_p1 = select_ln43_fu_366_p3;

assign zext_ln43_fu_414_p1 = select_ln43_2_fu_406_p3;

endmodule //dct_dct_Pipeline_Col_DCT_Loop_DCT_Outer_Loop
