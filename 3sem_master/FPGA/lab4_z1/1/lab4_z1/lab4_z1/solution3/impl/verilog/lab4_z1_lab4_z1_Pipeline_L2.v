// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lab4_z1_lab4_z1_Pipeline_L2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        secondVector_arr_address0,
        secondVector_arr_ce0,
        secondVector_arr_q0,
        resultVecror_arr_address0,
        resultVecror_arr_ce0,
        resultVecror_arr_we0,
        resultVecror_arr_d0,
        resultVecror_arr_address1,
        resultVecror_arr_ce1,
        resultVecror_arr_q1,
        sext_ln14,
        sext_ln14_4
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] secondVector_arr_address0;
output   secondVector_arr_ce0;
input  [15:0] secondVector_arr_q0;
output  [1:0] resultVecror_arr_address0;
output   resultVecror_arr_ce0;
output   resultVecror_arr_we0;
output  [31:0] resultVecror_arr_d0;
output  [1:0] resultVecror_arr_address1;
output   resultVecror_arr_ce1;
input  [31:0] resultVecror_arr_q1;
input  [15:0] sext_ln14;
input  [17:0] sext_ln14_4;

reg ap_idle;
reg secondVector_arr_ce0;
reg resultVecror_arr_ce0;
reg resultVecror_arr_we0;
reg resultVecror_arr_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln9_fu_105_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [31:0] sext_ln14_4_cast_fu_89_p1;
reg  signed [31:0] sext_ln14_4_cast_reg_153;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln14_cast_fu_93_p1;
reg  signed [31:0] sext_ln14_cast_reg_158;
reg   [1:0] resultVecror_arr_addr_reg_172;
reg   [1:0] resultVecror_arr_addr_reg_172_pp0_iter1_reg;
reg   [1:0] resultVecror_arr_addr_reg_172_pp0_iter2_reg;
reg   [1:0] resultVecror_arr_addr_reg_172_pp0_iter3_reg;
reg   [1:0] resultVecror_arr_addr_reg_172_pp0_iter4_reg;
wire  signed [31:0] conv4_fu_128_p1;
reg  signed [31:0] conv4_reg_178;
wire   [31:0] grp_fu_132_p3;
wire   [63:0] i_cast_fu_117_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_44;
wire   [2:0] add_ln9_fu_111_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_1;
wire   [31:0] grp_fu_139_p3;
wire  signed [15:0] grp_fu_132_p0;
wire  signed [17:0] grp_fu_139_p0;
wire  signed [15:0] grp_fu_139_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lab4_z1_mac_muladd_16s_16s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_16s_16s_32ns_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_132_p0),
    .din1(secondVector_arr_q0),
    .din2(resultVecror_arr_q1),
    .ce(1'b1),
    .dout(grp_fu_132_p3)
);

lab4_z1_mac_muladd_18s_16s_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_18s_16s_32ns_32_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_139_p0),
    .din1(grp_fu_139_p1),
    .din2(grp_fu_132_p3),
    .ce(1'b1),
    .dout(grp_fu_139_p3)
);

lab4_z1_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln9_fu_105_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_44 <= add_ln9_fu_111_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_44 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv4_reg_178 <= conv4_fu_128_p1;
        resultVecror_arr_addr_reg_172_pp0_iter1_reg <= resultVecror_arr_addr_reg_172;
        sext_ln14_4_cast_reg_153 <= sext_ln14_4_cast_fu_89_p1;
        sext_ln14_cast_reg_158 <= sext_ln14_cast_fu_93_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        resultVecror_arr_addr_reg_172_pp0_iter2_reg <= resultVecror_arr_addr_reg_172_pp0_iter1_reg;
        resultVecror_arr_addr_reg_172_pp0_iter3_reg <= resultVecror_arr_addr_reg_172_pp0_iter2_reg;
        resultVecror_arr_addr_reg_172_pp0_iter4_reg <= resultVecror_arr_addr_reg_172_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_105_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        resultVecror_arr_addr_reg_172 <= i_cast_fu_117_p1;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_105_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_44;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        resultVecror_arr_ce0 = 1'b1;
    end else begin
        resultVecror_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        resultVecror_arr_ce1 = 1'b1;
    end else begin
        resultVecror_arr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        resultVecror_arr_we0 = 1'b1;
    end else begin
        resultVecror_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        secondVector_arr_ce0 = 1'b1;
    end else begin
        secondVector_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln9_fu_111_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv4_fu_128_p1 = $signed(secondVector_arr_q0);

assign grp_fu_132_p0 = sext_ln14_cast_reg_158;

assign grp_fu_139_p0 = sext_ln14_4_cast_reg_153;

assign grp_fu_139_p1 = conv4_reg_178;

assign i_cast_fu_117_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln9_fu_105_p2 = ((ap_sig_allocacmp_i_1 == 3'd4) ? 1'b1 : 1'b0);

assign resultVecror_arr_address0 = resultVecror_arr_addr_reg_172_pp0_iter4_reg;

assign resultVecror_arr_address1 = resultVecror_arr_addr_reg_172_pp0_iter1_reg;

assign resultVecror_arr_d0 = grp_fu_139_p3;

assign secondVector_arr_address0 = i_cast_fu_117_p1;

assign sext_ln14_4_cast_fu_89_p1 = $signed(sext_ln14_4);

assign sext_ln14_cast_fu_93_p1 = $signed(sext_ln14);

endmodule //lab4_z1_lab4_z1_Pipeline_L2
