// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="foo_m_foo_m,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.895000,HLS_SYN_LAT=376836,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=0,HLS_SYN_FF=798,HLS_SYN_LUT=379,HLS_VERSION=2021_2}" *)

module foo_m (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_address0,
        data_in_ce0,
        data_in_q0,
        scale,
        data_out1_address0,
        data_out1_ce0,
        data_out1_we0,
        data_out1_d0,
        data_out2_address0,
        data_out2_ce0,
        data_out2_we0,
        data_out2_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] data_in_address0;
output   data_in_ce0;
input  [31:0] data_in_q0;
input  [31:0] scale;
output  [13:0] data_out1_address0;
output   data_out1_ce0;
output   data_out1_we0;
output  [31:0] data_out1_d0;
output  [13:0] data_out2_address0;
output   data_out2_ce0;
output   data_out2_we0;
output  [31:0] data_out2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_in_ce0;
reg data_out1_ce0;
reg data_out1_we0;
reg data_out2_ce0;
reg data_out2_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln21_fu_196_p1;
reg   [63:0] zext_ln21_reg_339;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln21_fu_201_p2;
reg  signed [31:0] data_in_load_reg_359;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] mul_ln24_reg_364;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln8_fu_230_p1;
reg   [63:0] zext_ln8_reg_369;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln8_fu_235_p2;
wire   [31:0] temp1_q0;
reg   [31:0] temp1_load_reg_390;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln31_fu_260_p1;
reg   [63:0] zext_ln31_reg_396;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln31_fu_265_p2;
wire   [31:0] temp2_q0;
reg  signed [31:0] temp2_load_reg_416;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_287_p2;
reg   [31:0] mul_ln34_reg_421;
wire    ap_CS_fsm_state19;
wire   [63:0] zext_ln38_fu_295_p1;
reg   [63:0] zext_ln38_reg_426;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln38_fu_300_p2;
wire   [31:0] temp3_q0;
reg   [31:0] temp3_load_reg_439;
wire    ap_CS_fsm_state22;
wire   [31:0] add_ln41_fu_322_p2;
reg   [31:0] add_ln41_reg_445;
wire    ap_CS_fsm_state23;
reg   [13:0] temp1_address0;
reg    temp1_ce0;
reg    temp1_we0;
reg   [13:0] temp2_address0;
reg    temp2_ce0;
reg    temp2_we0;
reg   [13:0] temp3_address0;
reg    temp3_ce0;
reg    temp3_we0;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
reg   [14:0] i_fu_58;
wire   [14:0] add_ln21_fu_207_p2;
reg   [14:0] i_1_fu_74;
wire   [14:0] add_ln8_fu_241_p2;
reg   [14:0] j_fu_78;
wire   [14:0] add_ln31_fu_271_p2;
reg   [14:0] k_fu_82;
wire   [14:0] add_ln38_fu_306_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] grp_fu_287_p1;
wire    ap_CS_fsm_state15;
wire   [31:0] shl_ln41_fu_317_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

foo_m_temp1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp1_address0),
    .ce0(temp1_ce0),
    .we0(temp1_we0),
    .d0(mul_ln24_reg_364),
    .q0(temp1_q0)
);

foo_m_temp1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp2_address0),
    .ce0(temp2_ce0),
    .we0(temp2_we0),
    .d0(temp1_load_reg_390),
    .q0(temp2_q0)
);

foo_m_temp1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
temp3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp3_address0),
    .ce0(temp3_ce0),
    .we0(temp3_we0),
    .d0(temp1_load_reg_390),
    .q0(temp3_q0)
);

foo_m_mul_32s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_in_load_reg_359),
    .din1(scale),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

foo_m_mul_32s_6ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
mul_32s_6ns_32_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp2_load_reg_416),
    .din1(grp_fu_287_p1),
    .ce(1'b1),
    .dout(grp_fu_287_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_fu_74 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln8_fu_235_p2 == 1'd0))) begin
        i_1_fu_74 <= add_ln8_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_58 <= 15'd0;
    end else if (((icmp_ln21_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_58 <= add_ln21_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln8_fu_235_p2 == 1'd1))) begin
        j_fu_78 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln31_fu_265_p2 == 1'd0))) begin
        j_fu_78 <= add_ln31_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln31_fu_265_p2 == 1'd1))) begin
        k_fu_82 <= 15'd0;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln38_fu_300_p2 == 1'd0))) begin
        k_fu_82 <= add_ln38_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        add_ln41_reg_445 <= add_ln41_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_in_load_reg_359 <= data_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln24_reg_364 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mul_ln34_reg_421 <= grp_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_load_reg_390 <= temp1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        temp2_load_reg_416 <= temp2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        temp3_load_reg_439 <= temp3_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln21_reg_339[14 : 0] <= zext_ln21_fu_196_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        zext_ln31_reg_396[14 : 0] <= zext_ln31_fu_260_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        zext_ln38_reg_426[14 : 0] <= zext_ln38_fu_295_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        zext_ln8_reg_369[14 : 0] <= zext_ln8_fu_230_p1[14 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln38_fu_300_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln38_fu_300_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_in_ce0 = 1'b1;
    end else begin
        data_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_out1_ce0 = 1'b1;
    end else begin
        data_out1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        data_out1_we0 = 1'b1;
    end else begin
        data_out1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        data_out2_ce0 = 1'b1;
    end else begin
        data_out2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        data_out2_we0 = 1'b1;
    end else begin
        data_out2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp1_address0 = zext_ln8_fu_230_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_address0 = zext_ln21_reg_339;
    end else begin
        temp1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        temp1_ce0 = 1'b1;
    end else begin
        temp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_we0 = 1'b1;
    end else begin
        temp1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temp2_address0 = zext_ln31_fu_260_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp2_address0 = zext_ln8_reg_369;
    end else begin
        temp2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13))) begin
        temp2_ce0 = 1'b1;
    end else begin
        temp2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp2_we0 = 1'b1;
    end else begin
        temp2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp3_address0 = zext_ln38_fu_295_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp3_address0 = zext_ln8_reg_369;
    end else begin
        temp3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state21))) begin
        temp3_ce0 = 1'b1;
    end else begin
        temp3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp3_we0 = 1'b1;
    end else begin
        temp3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln21_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln8_fu_235_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln31_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln38_fu_300_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_207_p2 = (i_fu_58 + 15'd1);

assign add_ln31_fu_271_p2 = (j_fu_78 + 15'd1);

assign add_ln38_fu_306_p2 = (k_fu_82 + 15'd1);

assign add_ln41_fu_322_p2 = (temp3_load_reg_439 + shl_ln41_fu_317_p2);

assign add_ln8_fu_241_p2 = (i_1_fu_74 + 15'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign data_in_address0 = zext_ln21_fu_196_p1;

assign data_out1_address0 = zext_ln31_reg_396;

assign data_out1_d0 = mul_ln34_reg_421;

assign data_out2_address0 = zext_ln38_reg_426;

assign data_out2_d0 = add_ln41_reg_445;

assign grp_fu_287_p1 = 32'd22;

assign icmp_ln21_fu_201_p2 = ((i_fu_58 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_265_p2 = ((j_fu_78 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_300_p2 = ((k_fu_82 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_235_p2 = ((i_1_fu_74 == 15'd16384) ? 1'b1 : 1'b0);

assign shl_ln41_fu_317_p2 = temp3_load_reg_439 << 32'd5;

assign zext_ln21_fu_196_p1 = i_fu_58;

assign zext_ln31_fu_260_p1 = j_fu_78;

assign zext_ln38_fu_295_p1 = k_fu_82;

assign zext_ln8_fu_230_p1 = i_1_fu_74;

always @ (posedge ap_clk) begin
    zext_ln21_reg_339[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln8_reg_369[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln31_reg_396[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    zext_ln38_reg_426[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
end

endmodule //foo_m
