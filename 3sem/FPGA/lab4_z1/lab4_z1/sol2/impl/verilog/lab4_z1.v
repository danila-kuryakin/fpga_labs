// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab4_z1_lab4_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.252000,HLS_SYN_LAT=53,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=266,HLS_SYN_LUT=238,HLS_VERSION=2021_2}" *)

module lab4_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        firstVector_arr_address0,
        firstVector_arr_ce0,
        firstVector_arr_q0,
        secondVector_arr_address0,
        secondVector_arr_ce0,
        secondVector_arr_q0,
        resultVecror_arr_address0,
        resultVecror_arr_ce0,
        resultVecror_arr_we0,
        resultVecror_arr_d0,
        resultVecror_arr_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] firstVector_arr_address0;
output   firstVector_arr_ce0;
input  [15:0] firstVector_arr_q0;
output  [1:0] secondVector_arr_address0;
output   secondVector_arr_ce0;
input  [15:0] secondVector_arr_q0;
output  [1:0] resultVecror_arr_address0;
output   resultVecror_arr_ce0;
output   resultVecror_arr_we0;
output  [31:0] resultVecror_arr_d0;
input  [31:0] resultVecror_arr_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg secondVector_arr_ce0;
reg[1:0] resultVecror_arr_address0;
reg resultVecror_arr_ce0;
reg resultVecror_arr_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] trunc_ln6_fu_109_p1;
reg   [1:0] trunc_ln6_reg_128;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_91_p2;
reg   [15:0] secondVector_arr_load_reg_143;
wire    ap_CS_fsm_state3;
reg   [31:0] resultVecror_arr_load_reg_148;
wire    grp_lab4_z1_Pipeline_L1_fu_72_ap_start;
wire    grp_lab4_z1_Pipeline_L1_fu_72_ap_done;
wire    grp_lab4_z1_Pipeline_L1_fu_72_ap_idle;
wire    grp_lab4_z1_Pipeline_L1_fu_72_ap_ready;
wire   [1:0] grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_address0;
wire    grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_ce0;
wire    grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_we0;
wire   [31:0] grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_d0;
wire   [1:0] grp_lab4_z1_Pipeline_L1_fu_72_firstVector_arr_address0;
wire    grp_lab4_z1_Pipeline_L1_fu_72_firstVector_arr_ce0;
reg    grp_lab4_z1_Pipeline_L1_fu_72_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln8_fu_103_p1;
reg   [2:0] i_fu_42;
wire   [2:0] add_ln8_fu_97_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_lab4_z1_Pipeline_L1_fu_72_ap_start_reg = 1'b0;
end

lab4_z1_lab4_z1_Pipeline_L1 grp_lab4_z1_Pipeline_L1_fu_72(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lab4_z1_Pipeline_L1_fu_72_ap_start),
    .ap_done(grp_lab4_z1_Pipeline_L1_fu_72_ap_done),
    .ap_idle(grp_lab4_z1_Pipeline_L1_fu_72_ap_idle),
    .ap_ready(grp_lab4_z1_Pipeline_L1_fu_72_ap_ready),
    .resultVecror_arr_load(resultVecror_arr_load_reg_148),
    .resultVecror_arr_address0(grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_address0),
    .resultVecror_arr_ce0(grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_ce0),
    .resultVecror_arr_we0(grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_we0),
    .resultVecror_arr_d0(grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_d0),
    .zext_ln8(trunc_ln6_reg_128),
    .firstVector_arr_address0(grp_lab4_z1_Pipeline_L1_fu_72_firstVector_arr_address0),
    .firstVector_arr_ce0(grp_lab4_z1_Pipeline_L1_fu_72_firstVector_arr_ce0),
    .firstVector_arr_q0(firstVector_arr_q0),
    .conv4(secondVector_arr_load_reg_143)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lab4_z1_Pipeline_L1_fu_72_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_lab4_z1_Pipeline_L1_fu_72_ap_start_reg <= 1'b1;
        end else if ((grp_lab4_z1_Pipeline_L1_fu_72_ap_ready == 1'b1)) begin
            grp_lab4_z1_Pipeline_L1_fu_72_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_42 <= 3'd0;
    end else if (((icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_42 <= add_ln8_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        resultVecror_arr_load_reg_148 <= resultVecror_arr_q0;
        secondVector_arr_load_reg_143 <= secondVector_arr_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln6_reg_128 <= trunc_ln6_fu_109_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_lab4_z1_Pipeline_L1_fu_72_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        resultVecror_arr_address0 = zext_ln8_fu_103_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        resultVecror_arr_address0 = grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_address0;
    end else begin
        resultVecror_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        resultVecror_arr_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        resultVecror_arr_ce0 = grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_ce0;
    end else begin
        resultVecror_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        resultVecror_arr_we0 = grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_we0;
    end else begin
        resultVecror_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secondVector_arr_ce0 = 1'b1;
    end else begin
        secondVector_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_lab4_z1_Pipeline_L1_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln8_fu_97_p2 = (i_fu_42 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign firstVector_arr_address0 = grp_lab4_z1_Pipeline_L1_fu_72_firstVector_arr_address0;

assign firstVector_arr_ce0 = grp_lab4_z1_Pipeline_L1_fu_72_firstVector_arr_ce0;

assign grp_lab4_z1_Pipeline_L1_fu_72_ap_start = grp_lab4_z1_Pipeline_L1_fu_72_ap_start_reg;

assign icmp_ln8_fu_91_p2 = ((i_fu_42 == 3'd4) ? 1'b1 : 1'b0);

assign resultVecror_arr_d0 = grp_lab4_z1_Pipeline_L1_fu_72_resultVecror_arr_d0;

assign secondVector_arr_address0 = zext_ln8_fu_103_p1;

assign trunc_ln6_fu_109_p1 = i_fu_42[1:0];

assign zext_ln8_fu_103_p1 = i_fu_42;

endmodule //lab4_z1
