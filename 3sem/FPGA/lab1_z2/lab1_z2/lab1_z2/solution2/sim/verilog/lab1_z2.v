// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab1_z2_lab1_z2,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.630750,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42,HLS_SYN_LUT=117,HLS_VERSION=2021_2}" *)

module lab1_z2 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inArr_address0,
        inArr_ce0,
        inArr_q0,
        a,
        b,
        c,
        outArr_address0,
        outArr_ce0,
        outArr_we0,
        outArr_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] inArr_address0;
output   inArr_ce0;
input  [15:0] inArr_q0;
input  [15:0] a;
input  [15:0] b;
input  [15:0] c;
output  [1:0] outArr_address0;
output   outArr_ce0;
output   outArr_we0;
output  [31:0] outArr_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inArr_ce0;
reg outArr_ce0;
reg outArr_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [16:0] sext_ln8_fu_104_p1;
reg  signed [16:0] sext_ln8_reg_178;
wire  signed [17:0] sext_ln12_1_fu_114_p1;
reg  signed [17:0] sext_ln12_1_reg_183;
wire   [63:0] zext_ln8_fu_126_p1;
reg   [63:0] zext_ln8_reg_188;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_131_p2;
wire    ap_CS_fsm_state3;
reg   [1:0] i_fu_48;
wire   [1:0] add_ln8_fu_137_p2;
wire  signed [16:0] b_cast_fu_100_p1;
wire  signed [16:0] a_cast_fu_96_p1;
wire   [16:0] add_ln12_fu_108_p2;
wire  signed [16:0] sext_ln12_fu_148_p1;
wire   [16:0] add_ln12_1_fu_152_p2;
wire  signed [17:0] sext_ln12_2_fu_157_p1;
wire   [17:0] y_fu_161_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_48 <= 2'd0;
    end else if (((icmp_ln8_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_48 <= add_ln8_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sext_ln12_1_reg_183 <= sext_ln12_1_fu_114_p1;
        sext_ln8_reg_178 <= sext_ln8_fu_104_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln8_reg_188[1 : 0] <= zext_ln8_fu_126_p1[1 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln8_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inArr_ce0 = 1'b1;
    end else begin
        inArr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outArr_ce0 = 1'b1;
    end else begin
        outArr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outArr_we0 = 1'b1;
    end else begin
        outArr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_cast_fu_96_p1 = $signed(a);

assign add_ln12_1_fu_152_p2 = ($signed(sext_ln8_reg_178) + $signed(sext_ln12_fu_148_p1));

assign add_ln12_fu_108_p2 = ($signed(b_cast_fu_100_p1) + $signed(a_cast_fu_96_p1));

assign add_ln8_fu_137_p2 = (i_fu_48 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign b_cast_fu_100_p1 = $signed(b);

assign icmp_ln8_fu_131_p2 = ((i_fu_48 == 2'd3) ? 1'b1 : 1'b0);

assign inArr_address0 = zext_ln8_fu_126_p1;

assign outArr_address0 = zext_ln8_reg_188;

assign outArr_d0 = $signed(y_fu_161_p2);

assign sext_ln12_1_fu_114_p1 = $signed(add_ln12_fu_108_p2);

assign sext_ln12_2_fu_157_p1 = $signed(add_ln12_1_fu_152_p2);

assign sext_ln12_fu_148_p1 = $signed(inArr_q0);

assign sext_ln8_fu_104_p1 = $signed(c);

assign y_fu_161_p2 = ($signed(sext_ln12_2_fu_157_p1) + $signed(sext_ln12_1_reg_183));

assign zext_ln8_fu_126_p1 = i_fu_48;

always @ (posedge ap_clk) begin
    zext_ln8_reg_188[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //lab1_z2
