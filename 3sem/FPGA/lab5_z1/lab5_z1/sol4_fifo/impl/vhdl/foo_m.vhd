-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foo_m is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    data_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_in_ce0 : OUT STD_LOGIC;
    data_in_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_we0 : OUT STD_LOGIC;
    data_in_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_in_ce1 : OUT STD_LOGIC;
    data_in_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_in_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_in_we1 : OUT STD_LOGIC;
    scale : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_out1_ce0 : OUT STD_LOGIC;
    data_out1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out1_we0 : OUT STD_LOGIC;
    data_out1_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_out1_ce1 : OUT STD_LOGIC;
    data_out1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out1_we1 : OUT STD_LOGIC;
    data_out2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_out2_ce0 : OUT STD_LOGIC;
    data_out2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out2_we0 : OUT STD_LOGIC;
    data_out2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_out2_ce1 : OUT STD_LOGIC;
    data_out2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data_out2_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of foo_m is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "foo_m_foo_m,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=65541,HLS_SYN_TPT=65538,HLS_SYN_MEM=96,HLS_SYN_DSP=0,HLS_SYN_FF=760,HLS_SYN_LUT=711,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Loop_Loop1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Loop1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop1_proc_U0_start_out : STD_LOGIC;
    signal Loop_Loop1_proc_U0_start_write : STD_LOGIC;
    signal Loop_Loop1_proc_U0_data_in_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop1_proc_U0_data_in_ce0 : STD_LOGIC;
    signal Loop_Loop1_proc_U0_temp1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_Loop1_proc_U0_temp1_write : STD_LOGIC;
    signal split_U0_ap_start : STD_LOGIC;
    signal split_U0_start_full_n : STD_LOGIC;
    signal split_U0_ap_done : STD_LOGIC;
    signal split_U0_ap_continue : STD_LOGIC;
    signal split_U0_ap_idle : STD_LOGIC;
    signal split_U0_ap_ready : STD_LOGIC;
    signal split_U0_start_out : STD_LOGIC;
    signal split_U0_start_write : STD_LOGIC;
    signal split_U0_in_r_read : STD_LOGIC;
    signal split_U0_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal split_U0_out1_write : STD_LOGIC;
    signal split_U0_out2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal split_U0_out2_write : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Loop2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop2_proc_U0_temp2_read : STD_LOGIC;
    signal Loop_Loop2_proc_U0_data_out1_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop2_proc_U0_data_out1_ce0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_data_out1_we0 : STD_LOGIC;
    signal Loop_Loop2_proc_U0_data_out1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_Loop3_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Loop3_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop3_proc_U0_temp3_read : STD_LOGIC;
    signal Loop_Loop3_proc_U0_data_out2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Loop_Loop3_proc_U0_data_out2_ce0 : STD_LOGIC;
    signal Loop_Loop3_proc_U0_data_out2_we0 : STD_LOGIC;
    signal Loop_Loop3_proc_U0_data_out2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_full_n : STD_LOGIC;
    signal temp1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_empty_n : STD_LOGIC;
    signal temp2_full_n : STD_LOGIC;
    signal temp2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_empty_n : STD_LOGIC;
    signal temp3_full_n : STD_LOGIC;
    signal temp3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal temp3_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal start_for_split_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_split_U0_full_n : STD_LOGIC;
    signal start_for_split_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_split_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_Loop2_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_Loop2_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_Loop2_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_Loop2_proc_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_Loop3_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_Loop3_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_Loop3_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_Loop3_proc_U0_empty_n : STD_LOGIC;

    component foo_m_Loop_Loop1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        data_in_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_in_ce0 : OUT STD_LOGIC;
        data_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        scale : IN STD_LOGIC_VECTOR (31 downto 0);
        temp1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        temp1_full_n : IN STD_LOGIC;
        temp1_write : OUT STD_LOGIC );
    end component;


    component foo_m_split IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_empty_n : IN STD_LOGIC;
        in_r_read : OUT STD_LOGIC;
        out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out1_full_n : IN STD_LOGIC;
        out1_write : OUT STD_LOGIC;
        out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out2_full_n : IN STD_LOGIC;
        out2_write : OUT STD_LOGIC );
    end component;


    component foo_m_Loop_Loop2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        temp2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        temp2_empty_n : IN STD_LOGIC;
        temp2_read : OUT STD_LOGIC;
        data_out1_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_out1_ce0 : OUT STD_LOGIC;
        data_out1_we0 : OUT STD_LOGIC;
        data_out1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foo_m_Loop_Loop3_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        temp3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        temp3_empty_n : IN STD_LOGIC;
        temp3_read : OUT STD_LOGIC;
        data_out2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_out2_ce0 : OUT STD_LOGIC;
        data_out2_we0 : OUT STD_LOGIC;
        data_out2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foo_m_fifo_w32_d16384_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component foo_m_start_for_split_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component foo_m_start_for_Loop_Loop2_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component foo_m_start_for_Loop_Loop3_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Loop_Loop1_proc_U0 : component foo_m_Loop_Loop1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Loop1_proc_U0_ap_start,
        start_full_n => start_for_split_U0_full_n,
        ap_done => Loop_Loop1_proc_U0_ap_done,
        ap_continue => Loop_Loop1_proc_U0_ap_continue,
        ap_idle => Loop_Loop1_proc_U0_ap_idle,
        ap_ready => Loop_Loop1_proc_U0_ap_ready,
        start_out => Loop_Loop1_proc_U0_start_out,
        start_write => Loop_Loop1_proc_U0_start_write,
        data_in_address0 => Loop_Loop1_proc_U0_data_in_address0,
        data_in_ce0 => Loop_Loop1_proc_U0_data_in_ce0,
        data_in_q0 => data_in_q0,
        scale => scale,
        temp1_din => Loop_Loop1_proc_U0_temp1_din,
        temp1_full_n => temp1_full_n,
        temp1_write => Loop_Loop1_proc_U0_temp1_write);

    split_U0 : component foo_m_split
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => split_U0_ap_start,
        start_full_n => split_U0_start_full_n,
        ap_done => split_U0_ap_done,
        ap_continue => split_U0_ap_continue,
        ap_idle => split_U0_ap_idle,
        ap_ready => split_U0_ap_ready,
        start_out => split_U0_start_out,
        start_write => split_U0_start_write,
        in_r_dout => temp1_dout,
        in_r_empty_n => temp1_empty_n,
        in_r_read => split_U0_in_r_read,
        out1_din => split_U0_out1_din,
        out1_full_n => temp2_full_n,
        out1_write => split_U0_out1_write,
        out2_din => split_U0_out2_din,
        out2_full_n => temp3_full_n,
        out2_write => split_U0_out2_write);

    Loop_Loop2_proc_U0 : component foo_m_Loop_Loop2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Loop2_proc_U0_ap_start,
        ap_done => Loop_Loop2_proc_U0_ap_done,
        ap_continue => Loop_Loop2_proc_U0_ap_continue,
        ap_idle => Loop_Loop2_proc_U0_ap_idle,
        ap_ready => Loop_Loop2_proc_U0_ap_ready,
        temp2_dout => temp2_dout,
        temp2_empty_n => temp2_empty_n,
        temp2_read => Loop_Loop2_proc_U0_temp2_read,
        data_out1_address0 => Loop_Loop2_proc_U0_data_out1_address0,
        data_out1_ce0 => Loop_Loop2_proc_U0_data_out1_ce0,
        data_out1_we0 => Loop_Loop2_proc_U0_data_out1_we0,
        data_out1_d0 => Loop_Loop2_proc_U0_data_out1_d0);

    Loop_Loop3_proc_U0 : component foo_m_Loop_Loop3_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Loop3_proc_U0_ap_start,
        ap_done => Loop_Loop3_proc_U0_ap_done,
        ap_continue => Loop_Loop3_proc_U0_ap_continue,
        ap_idle => Loop_Loop3_proc_U0_ap_idle,
        ap_ready => Loop_Loop3_proc_U0_ap_ready,
        temp3_dout => temp3_dout,
        temp3_empty_n => temp3_empty_n,
        temp3_read => Loop_Loop3_proc_U0_temp3_read,
        data_out2_address0 => Loop_Loop3_proc_U0_data_out2_address0,
        data_out2_ce0 => Loop_Loop3_proc_U0_data_out2_ce0,
        data_out2_we0 => Loop_Loop3_proc_U0_data_out2_we0,
        data_out2_d0 => Loop_Loop3_proc_U0_data_out2_d0);

    temp1_U : component foo_m_fifo_w32_d16384_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_Loop1_proc_U0_temp1_din,
        if_full_n => temp1_full_n,
        if_write => Loop_Loop1_proc_U0_temp1_write,
        if_dout => temp1_dout,
        if_empty_n => temp1_empty_n,
        if_read => split_U0_in_r_read);

    temp2_U : component foo_m_fifo_w32_d16384_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_U0_out1_din,
        if_full_n => temp2_full_n,
        if_write => split_U0_out1_write,
        if_dout => temp2_dout,
        if_empty_n => temp2_empty_n,
        if_read => Loop_Loop2_proc_U0_temp2_read);

    temp3_U : component foo_m_fifo_w32_d16384_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_U0_out2_din,
        if_full_n => temp3_full_n,
        if_write => split_U0_out2_write,
        if_dout => temp3_dout,
        if_empty_n => temp3_empty_n,
        if_read => Loop_Loop3_proc_U0_temp3_read);

    start_for_split_U0_U : component foo_m_start_for_split_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_split_U0_din,
        if_full_n => start_for_split_U0_full_n,
        if_write => Loop_Loop1_proc_U0_start_write,
        if_dout => start_for_split_U0_dout,
        if_empty_n => start_for_split_U0_empty_n,
        if_read => split_U0_ap_ready);

    start_for_Loop_Loop2_proc_U0_U : component foo_m_start_for_Loop_Loop2_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_Loop2_proc_U0_din,
        if_full_n => start_for_Loop_Loop2_proc_U0_full_n,
        if_write => split_U0_start_write,
        if_dout => start_for_Loop_Loop2_proc_U0_dout,
        if_empty_n => start_for_Loop_Loop2_proc_U0_empty_n,
        if_read => Loop_Loop2_proc_U0_ap_ready);

    start_for_Loop_Loop3_proc_U0_U : component foo_m_start_for_Loop_Loop3_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_Loop3_proc_U0_din,
        if_full_n => start_for_Loop_Loop3_proc_U0_full_n,
        if_write => split_U0_start_write,
        if_dout => start_for_Loop_Loop3_proc_U0_dout,
        if_empty_n => start_for_Loop_Loop3_proc_U0_empty_n,
        if_read => Loop_Loop3_proc_U0_ap_ready);




    Loop_Loop1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_Loop1_proc_U0_ap_start <= ap_start;
    Loop_Loop2_proc_U0_ap_continue <= ap_sync_done;
    Loop_Loop2_proc_U0_ap_start <= start_for_Loop_Loop2_proc_U0_empty_n;
    Loop_Loop3_proc_U0_ap_continue <= ap_sync_done;
    Loop_Loop3_proc_U0_ap_start <= start_for_Loop_Loop3_proc_U0_empty_n;
    ap_done <= ap_sync_done;
    ap_idle <= (split_U0_ap_idle and Loop_Loop3_proc_U0_ap_idle and Loop_Loop2_proc_U0_ap_idle and Loop_Loop1_proc_U0_ap_idle);
    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;
    ap_ready <= Loop_Loop1_proc_U0_ap_ready;
    ap_sync_done <= (Loop_Loop3_proc_U0_ap_done and Loop_Loop2_proc_U0_ap_done);
    data_in_address0 <= Loop_Loop1_proc_U0_data_in_address0;
    data_in_address1 <= ap_const_lv14_0;
    data_in_ce0 <= Loop_Loop1_proc_U0_data_in_ce0;
    data_in_ce1 <= ap_const_logic_0;
    data_in_d0 <= ap_const_lv32_0;
    data_in_d1 <= ap_const_lv32_0;
    data_in_we0 <= ap_const_logic_0;
    data_in_we1 <= ap_const_logic_0;
    data_out1_address0 <= Loop_Loop2_proc_U0_data_out1_address0;
    data_out1_address1 <= ap_const_lv14_0;
    data_out1_ce0 <= Loop_Loop2_proc_U0_data_out1_ce0;
    data_out1_ce1 <= ap_const_logic_0;
    data_out1_d0 <= Loop_Loop2_proc_U0_data_out1_d0;
    data_out1_d1 <= ap_const_lv32_0;
    data_out1_we0 <= Loop_Loop2_proc_U0_data_out1_we0;
    data_out1_we1 <= ap_const_logic_0;
    data_out2_address0 <= Loop_Loop3_proc_U0_data_out2_address0;
    data_out2_address1 <= ap_const_lv14_0;
    data_out2_ce0 <= Loop_Loop3_proc_U0_data_out2_ce0;
    data_out2_ce1 <= ap_const_logic_0;
    data_out2_d0 <= Loop_Loop3_proc_U0_data_out2_d0;
    data_out2_d1 <= ap_const_lv32_0;
    data_out2_we0 <= Loop_Loop3_proc_U0_data_out2_we0;
    data_out2_we1 <= ap_const_logic_0;
    split_U0_ap_continue <= ap_const_logic_1;
    split_U0_ap_start <= start_for_split_U0_empty_n;
    split_U0_start_full_n <= (start_for_Loop_Loop3_proc_U0_full_n and start_for_Loop_Loop2_proc_U0_full_n);
    start_for_Loop_Loop2_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_Loop3_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_split_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
