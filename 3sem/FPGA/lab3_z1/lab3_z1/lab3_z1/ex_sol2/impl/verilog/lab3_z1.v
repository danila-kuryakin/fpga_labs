// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lab3_z1_lab3_z1,hls_ip_2021_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.702000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=54,HLS_SYN_LUT=113,HLS_VERSION=2021_2}" *)

module lab3_z1 (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inA,
        inA_ap_vld,
        inA_ap_ack,
        inB,
        inB_ap_vld,
        inB_ap_ack,
        inC,
        inC_ap_vld,
        inC_ap_ack,
        res,
        res_ap_vld,
        res_ap_ack,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] inA;
input   inA_ap_vld;
output   inA_ap_ack;
input  [15:0] inB;
input   inB_ap_vld;
output   inB_ap_ack;
input  [15:0] inC;
input   inC_ap_vld;
output   inC_ap_ack;
output  [31:0] res;
output   res_ap_vld;
input   res_ap_ack;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inA_ap_ack;
reg inB_ap_ack;
reg inC_ap_ack;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inA_blk_n;
reg    inB_blk_n;
reg    inC_blk_n;
reg    res_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [15:0] inB_read_reg_79;
wire  signed [31:0] grp_fu_72_p2;
reg  signed [31:0] temp_reg_94;
reg    ap_block_state1;
wire  signed [31:0] sext_ln7_fu_63_p1;
reg    grp_fu_72_ce;
wire    regslice_forward_res_U_apdone_blk;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire   [31:0] res_int_regslice;
reg    res_ap_vld_int_regslice;
wire    res_ap_ack_int_regslice;
wire    regslice_forward_res_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

lab3_z1_mul_mul_16s_16s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16s_16s_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(inC),
    .din1(inA),
    .ce(grp_fu_72_ce),
    .dout(grp_fu_72_p2)
);

lab3_z1_regslice_forward #(
    .DataWidth( 32 ))
regslice_forward_res_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_int_regslice),
    .vld_in(res_ap_vld_int_regslice),
    .ack_in(res_ap_ack_int_regslice),
    .data_out(res),
    .vld_out(regslice_forward_res_U_vld_out),
    .ack_out(res_ap_ack),
    .apdone_blk(regslice_forward_res_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((res_ap_ack_int_regslice == 1'b0) | (regslice_forward_res_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        inB_read_reg_79 <= inB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_reg_94 <= grp_fu_72_p2;
    end
end

always @ (*) begin
    if (((inC_ap_vld == 1'b0) | (inB_ap_vld == 1'b0) | (inA_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((res_ap_ack_int_regslice == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((res_ap_ack_int_regslice == 1'b0) | (regslice_forward_res_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((res_ap_ack_int_regslice == 1'b0) | (regslice_forward_res_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((res_ap_ack_int_regslice == 1'b0) | (regslice_forward_res_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state4) & (res_ap_ack_int_regslice == 1'b0)) | ((1'b1 == ap_CS_fsm_state1) & ((inC_ap_vld == 1'b0) | (inB_ap_vld == 1'b0) | (inA_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))))) begin
        grp_fu_72_ce = 1'b0;
    end else begin
        grp_fu_72_ce = 1'b1;
    end
end

always @ (*) begin
    if ((~((inC_ap_vld == 1'b0) | (inB_ap_vld == 1'b0) | (inA_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inA_ap_ack = 1'b1;
    end else begin
        inA_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inA_blk_n = inA_ap_vld;
    end else begin
        inA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inC_ap_vld == 1'b0) | (inB_ap_vld == 1'b0) | (inA_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inB_ap_ack = 1'b1;
    end else begin
        inB_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inB_blk_n = inB_ap_vld;
    end else begin
        inB_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inC_ap_vld == 1'b0) | (inB_ap_vld == 1'b0) | (inA_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inC_ap_ack = 1'b1;
    end else begin
        inC_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inC_blk_n = inC_ap_vld;
    end else begin
        inC_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (res_ap_ack_int_regslice == 1'b1))) begin
        res_ap_vld_int_regslice = 1'b1;
    end else begin
        res_ap_vld_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        res_blk_n = res_ap_ack_int_regslice;
    end else begin
        res_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((inC_ap_vld == 1'b0) | (inB_ap_vld == 1'b0) | (inA_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (res_ap_ack_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((res_ap_ack_int_regslice == 1'b0) | (regslice_forward_res_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((inC_ap_vld == 1'b0) | (inB_ap_vld == 1'b0) | (inA_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((res_ap_ack_int_regslice == 1'b0) | (regslice_forward_res_U_apdone_blk == 1'b1));
end

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

assign ap_return = temp_reg_94;

assign res_ap_vld = regslice_forward_res_U_vld_out;

assign res_int_regslice = ($signed(grp_fu_72_p2) + $signed(sext_ln7_fu_63_p1));

assign sext_ln7_fu_63_p1 = $signed(inB_read_reg_79);

endmodule //lab3_z1
